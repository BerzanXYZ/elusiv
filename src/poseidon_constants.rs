use ark_ff::BigInteger256;
use super::scalar::Scalar;

pub const ITERATIONS: usize = 14;

pub fn generate_constants(iteration: usize) -> Vec<[Scalar; 3]> {
	match iteration { 
		0 => generate_c0(),
		1 => generate_c1(),
		2 => generate_c2(),
		3 => generate_c3(),
		4 => generate_c4(),
		5 => generate_c5(),
		6 => generate_c6(),
		7 => generate_c7(),
		8 => generate_c8(),
		9 => generate_c9(),
		10 => generate_c10(),
		11 => generate_c11(),
		12 => generate_c12(),
		13 => generate_c13(),
		_ => panic!("Invalid round")
	}
}

pub fn get_iteration_start_and_length(iteration: usize) -> (usize, usize) {
	match iteration { 
		0 => (0, 3),
		1 => (3, 5),
		2 => (8, 5),
		3 => (13, 5),
		4 => (18, 5),
		5 => (23, 5),
		6 => (28, 5),
		7 => (33, 5),
		8 => (38, 5),
		9 => (43, 5),
		10 => (48, 5),
		11 => (53, 5),
		12 => (58, 5),
		13 => (63, 2),
		_ => panic!("Invalid round")
	}
}

pub fn generate_c0() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([10169643024046198382, 1496489459468413331, 15013179087956216865, 1074572035719075096]).into(),
			BigInteger256([6239455757362194532, 9834463921409911007, 6450940760387492813, 67910589270332556]).into(),
			BigInteger256([16751688058965816309, 3514822508764902252, 2245502192544547001, 639497164796119454]).into(),
		],
		[
			BigInteger256([2348173180299641296, 6251932254013741678, 14109259725315707848, 3397893802321178182]).into(),
			BigInteger256([10052922493383044338, 13214685027855777508, 2600475563429683764, 3110546625639709581]).into(),
			BigInteger256([16594432877155917050, 6436419528597111786, 14746450667121398997, 223438775977242494]).into(),
		],
		[
			BigInteger256([10301900068242346605, 14463238905455560233, 9959550014935311931, 2918681975259572866]).into(),
			BigInteger256([1515787476805471096, 2320345919784178364, 17402400686162957325, 2821337195423189251]).into(),
			BigInteger256([13329421459288540722, 7997218926952286166, 16666341364125177037, 2544186741652662210]).into(),
		],
	]
}

pub fn generate_c1() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([14815153299398317096, 12326536988431973148, 9189081236192950112, 1564197350901735823]).into(),
			BigInteger256([15492898315278275062, 10236271341713535282, 6834674029815110883, 993319518520783711]).into(),
			BigInteger256([10916819061073399196, 16883629385166233580, 6921874708522579303, 2003422334954896330]).into(),
		],
		[
			BigInteger256([1714630715101799769, 14370321670889575288, 16856964725142963021, 1176014593347144415]).into(),
			BigInteger256([16756379877222262774, 2968515920474853548, 11179479702445996788, 2264545440983580541]).into(),
			BigInteger256([14570479280712353541, 18444734288884600265, 15176568821682145435, 2131985990035738644]).into(),
		],
		[
			BigInteger256([10368363968134106237, 12047691299872059909, 12705208366813915547, 351098625659878575]).into(),
			BigInteger256([17792640394833160232, 9696427064407893159, 1520876545687531284, 464672949723461184]).into(),
			BigInteger256([11511719757092779449, 908211774484017294, 12831319216039648607, 691674951170147412]).into(),
		],
		[
			BigInteger256([9510773949154959270, 5252381917909929361, 8955462025988621972, 372877525797294092]).into(),
			BigInteger256([1587374528693423580, 9430068611203050871, 12735463350683146671, 831949795656129422]).into(),
			BigInteger256([13358750343521025489, 5314631703920803920, 6493880948315916231, 1268631432301053871]).into(),
		],
		[
			BigInteger256([14849984304993963273, 3191591746076102373, 2677903913737681795, 222096387432894843]).into(),
			BigInteger256([13720721153165534565, 6013694977031309706, 4391455072429085237, 3226292761893557358]).into(),
			BigInteger256([10579744368738693369, 4762779664445951531, 5823120412175020918, 22573339300296900]).into(),
		],
	]
}

pub fn generate_c2() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([9870159944135898805, 7235529342485293563, 13480538772416018769, 2536150988941404724]).into(),
			BigInteger256([16720789321578578560, 2522999998976288164, 14519837292043943523, 416852298297550563]).into(),
			BigInteger256([17158443766907913819, 5961907595872497041, 13404357466265350738, 755230009370792854]).into(),
		],
		[
			BigInteger256([6770390416031239872, 17390336258944747484, 12772936794330968795, 3058989918289202421]).into(),
			BigInteger256([8549908775410123872, 17012614519708971561, 10615274498289114563, 1930267710583523745]).into(),
			BigInteger256([10382466218761732032, 2783011596995200052, 4587954668146979961, 1351136628495840386]).into(),
		],
		[
			BigInteger256([9387305021536313998, 5949266803577039558, 9176955995885039695, 825414034829436333]).into(),
			BigInteger256([3651076418516780104, 8972364766045991658, 15788598065422186641, 251119977008056894]).into(),
			BigInteger256([5043382280892331119, 15357393874202951105, 16800243441893211803, 407154788704645140]).into(),
		],
		[
			BigInteger256([8892180399712360046, 4645155678429152180, 7968129386745339652, 3001532499684763796]).into(),
			BigInteger256([5799476994968113711, 7965868846460524636, 5018001173082862978, 2324871211209925355]).into(),
			BigInteger256([5344206134167390343, 13497554678722349933, 10730987543428800497, 3317931201752125258]).into(),
		],
		[
			BigInteger256([16632037294831661512, 1693965690577373394, 14571655515630349125, 1459114695872543527]).into(),
			BigInteger256([14430416535844145905, 17897610966497868991, 6311387765811975117, 893062843581543608]).into(),
			BigInteger256([17384577287839799891, 16667598527773455984, 5115149256409481050, 183011890581373942]).into(),
		],
	]
}

pub fn generate_c3() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([2654438065656423180, 7668446424519157688, 6893111809130332402, 3336873827275337690]).into(),
			BigInteger256([13358667107604709390, 9882503929482424440, 7194379942859558459, 36531667966592230]).into(),
			BigInteger256([13441731135665126200, 16305593838641322507, 1764900527919325278, 3374868242345334601]).into(),
		],
		[
			BigInteger256([11029036156622950918, 3767439400139705484, 5458142085128053488, 3481451364176733008]).into(),
			BigInteger256([12056858118866257581, 17339159417937361729, 2457694693050504889, 2035381829023865427]).into(),
			BigInteger256([1659725671961508204, 14153602109795078942, 330192436874582254, 1203842034152894467]).into(),
		],
		[
			BigInteger256([259699493296123375, 15961029778693674869, 4457811829436721853, 3033599411683850228]).into(),
			BigInteger256([6678010397103840401, 13421605108260313849, 18365044507182290269, 2050525847674035638]).into(),
			BigInteger256([11254465069202884256, 11407387557876501754, 16913602912723147595, 527834611401260952]).into(),
		],
		[
			BigInteger256([9948922113988233040, 2908314857315156352, 11624323827010875732, 2402506864120038473]).into(),
			BigInteger256([8375966539063315102, 13612191774966483206, 625257772314144528, 3393392318161610646]).into(),
			BigInteger256([16601869878711972622, 10913809729668532042, 12078243733072605372, 3262715235694311176]).into(),
		],
		[
			BigInteger256([15608316279448174251, 12662471127068531388, 10439508139178259089, 1598586842980050115]).into(),
			BigInteger256([8608532833637053201, 15539768828324126602, 2760369212817214746, 3120064577965505096]).into(),
			BigInteger256([4779699930828877946, 7904642866356798671, 2142298301270611063, 3210992535745164252]).into(),
		],
	]
}

pub fn generate_c4() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([16566647052584656297, 11392807339846396333, 17509790013340347161, 2120971635856277866]).into(),
			BigInteger256([5536220222296839465, 18007269287740125490, 16988379011452997949, 2326967073555529329]).into(),
			BigInteger256([5762632206312391938, 11442382750973961555, 5697416040074198063, 886287582240954391]).into(),
		],
		[
			BigInteger256([11124293347412048724, 2187704089670443107, 11696998627716706352, 1678389218646739097]).into(),
			BigInteger256([4222149753036133103, 16909372562319609761, 17823522529666649570, 1915744512019107209]).into(),
			BigInteger256([9386254665973801738, 369343627046108186, 15055393180748924159, 463031500367058716]).into(),
		],
		[
			BigInteger256([2811225156588656644, 4043324678723349205, 2419972489884392763, 3047898763605249269]).into(),
			BigInteger256([16526798864378746441, 6805642193013234135, 5181939895697731017, 1417276069191301076]).into(),
			BigInteger256([5489393743654840986, 13956742994665100569, 1860634826424985449, 1234361436619539990]).into(),
		],
		[
			BigInteger256([695054542422134769, 12019305300333709961, 9843681412023287159, 67383789733625196]).into(),
			BigInteger256([9537157493527123923, 4615195029880018393, 10026734106030658022, 1019300322962990368]).into(),
			BigInteger256([5063327708825434761, 4132830927089380748, 2617264721062385806, 3023383046488159874]).into(),
		],
		[
			BigInteger256([1028346471269770686, 6490335944564795927, 16130261465708739976, 3050889264512630458]).into(),
			BigInteger256([17168111284362386161, 17486960142991188712, 17076376746195272713, 2054593364731744093]).into(),
			BigInteger256([15262887479649442245, 9505100495929542591, 13855096146465136747, 1520808608629131791]).into(),
		],
	]
}

pub fn generate_c5() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([16676344953669021952, 12246747301111320017, 13957281728738336067, 343989352091453469]).into(),
			BigInteger256([11421158882397661543, 5440847660503758404, 1213793981452479827, 1419614475451705339]).into(),
			BigInteger256([10601982260714973412, 3234541434695713580, 17688098355818888058, 118717801572347293]).into(),
		],
		[
			BigInteger256([9449177667644177154, 5375657923623462618, 6543835113666090251, 3076897632389067651]).into(),
			BigInteger256([11492857592340264518, 12443281895567735798, 2310318942922528275, 2111500766629273819]).into(),
			BigInteger256([1519060835352555293, 13341127823664892785, 10328870498885827883, 293460558823836962]).into(),
		],
		[
			BigInteger256([299896046629691334, 11021848952288240530, 2040032867427221576, 1534260234819767393]).into(),
			BigInteger256([4982201902518914468, 5815106221790245040, 4534518171699180816, 807161977694049528]).into(),
			BigInteger256([9362303805132752942, 11020562407162685405, 6099272804889998405, 672695088330099010]).into(),
		],
		[
			BigInteger256([3829537558432663078, 12224726650097720431, 2790510079905979068, 465113627828659524]).into(),
			BigInteger256([12434856935128332283, 4099816137562300822, 5291509800583676536, 1087889381526684220]).into(),
			BigInteger256([3058931662356704787, 5455375754292263881, 9999573367242040862, 357735772164585264]).into(),
		],
		[
			BigInteger256([13940484895148816216, 9804876323883312219, 13953255888728739331, 3122849638617761013]).into(),
			BigInteger256([9511239974733687279, 10237687677678873181, 15913306046644034507, 1312634215549218900]).into(),
			BigInteger256([10675073936499958761, 12216566237822522633, 9866914788429900494, 2398083397542529034]).into(),
		],
	]
}

pub fn generate_c6() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([16885311708936791373, 7241347522894119874, 1903990226363296297, 1142822869681276272]).into(),
			BigInteger256([10686875188351513074, 13614366883246235843, 16098305773841909460, 1312582147797590020]).into(),
			BigInteger256([15963606144910950453, 11980267062975283715, 12501611241057470952, 2442346185398548571]).into(),
		],
		[
			BigInteger256([9980420217207238983, 13074906607698438413, 16119634457238226018, 1595462938248686755]).into(),
			BigInteger256([11617670042665110210, 12376478257583768892, 17757582124498240376, 2232629200712726708]).into(),
			BigInteger256([4280439214426330778, 15305717883324493701, 9837552695788434311, 570372229075787216]).into(),
		],
		[
			BigInteger256([12249253053461168316, 7282067329116856604, 13237337846485506915, 407792342528658083]).into(),
			BigInteger256([3286879747248941119, 4573432664601249672, 18158049416766721452, 2373493147218089556]).into(),
			BigInteger256([11230019463442324329, 7912136838618106113, 10841000784467734883, 333599382087531880]).into(),
		],
		[
			BigInteger256([16473825850870796314, 13624353028681918311, 16451401310565375468, 2875703994879278542]).into(),
			BigInteger256([1687796451943245009, 7928980879331832355, 13305261426485117430, 3453928292668169945]).into(),
			BigInteger256([7598338644619817656, 10729144591383079437, 4630335118873107699, 2222469752301051004]).into(),
		],
		[
			BigInteger256([16080230830081207066, 12423042439722618314, 1549230324095215118, 1545911809876140835]).into(),
			BigInteger256([2904543854463076229, 8579485197604225815, 14453736105001743365, 1921955480208825986]).into(),
			BigInteger256([17038711017906273399, 9452543770650697585, 18004737915611345751, 2703598197550172048]).into(),
		],
	]
}

pub fn generate_c7() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([998897782403394151, 6032549410726290231, 14877717775171186163, 1559795874367549122]).into(),
			BigInteger256([3392697467836765991, 15922000626033260368, 1079313812342659430, 2599093181141465496]).into(),
			BigInteger256([6377813262293748891, 5181859273934949669, 1433048174057411302, 13070502006410567]).into(),
		],
		[
			BigInteger256([4145621046567048658, 12650345898048364247, 10942059026714787025, 3456438562529005033]).into(),
			BigInteger256([16806278217174170814, 3356626440802756849, 6836507271113723160, 52217025170580825]).into(),
			BigInteger256([9040885813031482642, 2063783757152207784, 9696596405493190145, 733897032897314666]).into(),
		],
		[
			BigInteger256([9163181484798974349, 1106091070615971483, 4199500626945875606, 10275305867431991]).into(),
			BigInteger256([5830843384116006313, 4139255191202704419, 2940723024787082394, 1665582135731026707]).into(),
			BigInteger256([11317622713099790344, 6974195757466602969, 8072839204361927383, 1660226640530079177]).into(),
		],
		[
			BigInteger256([5201316823598627553, 14715480498374840762, 3383068957560025966, 3002673069591357036]).into(),
			BigInteger256([13094889931869145459, 16648982407050338536, 18289605278935059783, 2205569170731292504]).into(),
			BigInteger256([11285488793507827465, 18350717580005913679, 6410861464604314458, 2148895943228264365]).into(),
		],
		[
			BigInteger256([6709750789426163512, 8992917079336798153, 4616613824157795742, 2507867874581904081]).into(),
			BigInteger256([15400784301878071037, 18244452579437791868, 4224191343226798030, 1076433859378617427]).into(),
			BigInteger256([4264996793658278532, 1376105531089050016, 17476204074859227269, 1252174447925563362]).into(),
		],
	]
}

pub fn generate_c8() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([626157971226405295, 18360428839510729767, 11418101606126458807, 1253929125255671226]).into(),
			BigInteger256([17894393997393060966, 1693282321587506006, 10610815137722143707, 3307095170886567317]).into(),
			BigInteger256([8412444619122534829, 17661690963694250141, 11127731205362461725, 3460712092451636609]).into(),
		],
		[
			BigInteger256([7076365036357439622, 2996018067437664761, 18288959755437174594, 3095133733569333888]).into(),
			BigInteger256([9345554969304508355, 9734718780845491687, 16548111906976335323, 1269566828719773023]).into(),
			BigInteger256([14985592217270212608, 13047571069448810567, 1768764949568828727, 1744502220636328542]).into(),
		],
		[
			BigInteger256([7800483618336468662, 15083323447214890130, 5582574125022657056, 2891339774727348131]).into(),
			BigInteger256([5365510678292251879, 9677253646602045298, 10729843634325729280, 594190901955360016]).into(),
			BigInteger256([11387234443688137019, 1279424678775871569, 7014609431566646248, 824027491960199506]).into(),
		],
		[
			BigInteger256([1457211823867907931, 6383027606162415120, 7228109047101594260, 1065216652437508569]).into(),
			BigInteger256([61141279752947089, 17065237724822033421, 1927762415130120514, 3094885811492450599]).into(),
			BigInteger256([3912754945728835960, 3771356032485721483, 15031711080582401655, 815716758723016167]).into(),
		],
		[
			BigInteger256([14565351617278385472, 11584783007181865516, 15626181124208896302, 805425446120956330]).into(),
			BigInteger256([16142621932647703252, 6320039675520759995, 15672753973526549481, 2267858513861341332]).into(),
			BigInteger256([15749878102686188083, 614109551756748456, 12585727881591095317, 104123295342755102]).into(),
		],
	]
}

pub fn generate_c9() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([8512653459191138419, 8722136429807568464, 3646779388833721243, 877373150580798793]).into(),
			BigInteger256([6717122165374165389, 8988252081842455491, 5645968194207689527, 1252839797334746901]).into(),
			BigInteger256([1595382035876223936, 2894788246433044882, 7254516605129339151, 3392435059111642139]).into(),
		],
		[
			BigInteger256([13998303702462746555, 13567266803394983698, 11055620437644727489, 2193238868414204989]).into(),
			BigInteger256([8541111410171021429, 15510862156074330629, 7499768617590159362, 129069364530034896]).into(),
			BigInteger256([836365385714984206, 7494700099001437856, 9725935530670171100, 2267339694435901381]).into(),
		],
		[
			BigInteger256([5135733616265261081, 2426332595100882671, 4656936268612107177, 2675901305471578230]).into(),
			BigInteger256([10151513934083020635, 3753973305408449599, 5932656183844634499, 2589779655048364701]).into(),
			BigInteger256([7411025101745302873, 6707027749470441567, 14604097463168980328, 3152993128539731999]).into(),
		],
		[
			BigInteger256([9228435110421995615, 7077145627258986441, 8287837705857547985, 1122529595160356003]).into(),
			BigInteger256([14632877491481866408, 1722445538081828426, 7473487843190403406, 2549223116576907002]).into(),
			BigInteger256([7911624047840495944, 13006776561127361280, 9244905133407413598, 1551237582814894454]).into(),
		],
		[
			BigInteger256([5734626924445778447, 3904426628295653716, 758384697192160672, 1817860466175176350]).into(),
			BigInteger256([16442809390655319567, 4264455610716866612, 3430587810186965360, 3042544677360207512]).into(),
			BigInteger256([12976680908701618498, 9884505158002686887, 4506805106606625170, 1754597687761070431]).into(),
		],
	]
}

pub fn generate_c10() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([4651435674279269163, 3103468488976219594, 86770003631272336, 351588734636199512]).into(),
			BigInteger256([2260337876880351011, 12758337300762156683, 4666632919716891739, 1142547878393382557]).into(),
			BigInteger256([12238467918978150848, 8498440410987792772, 12272022433944218978, 399903969432840125]).into(),
		],
		[
			BigInteger256([15083162859014497690, 2572883854687877808, 5295861190485996843, 1405947505286439302]).into(),
			BigInteger256([16277807055507155125, 9178820837597334391, 583720080208146622, 235956917338752750]).into(),
			BigInteger256([12275617654227012184, 8055449209487420250, 18443150053558188092, 2591750978202878614]).into(),
		],
		[
			BigInteger256([1829412907376403186, 1784551171442285202, 9110382820117307087, 745804616459797009]).into(),
			BigInteger256([17636728153934123131, 16340444422133123832, 13081815878669958460, 498866876760309842]).into(),
			BigInteger256([10821885995694136577, 12723584804667044276, 5146301989088820936, 1263385986896629429]).into(),
		],
		[
			BigInteger256([10800072172023390641, 5971967654560104426, 6545357310958328301, 1429505446243742742]).into(),
			BigInteger256([18269496140486461307, 16002478335803382869, 8120489888303010331, 1628640051152447506]).into(),
			BigInteger256([18122091663874610253, 4233014431675774575, 17240608988078162137, 355592338756513175]).into(),
		],
		[
			BigInteger256([15417051770040314348, 1867975149401080782, 1066645743524851259, 2697118902655154489]).into(),
			BigInteger256([11529920096058011314, 8488218827988262189, 16569498673561862223, 3463317764937792863]).into(),
			BigInteger256([2293207290640910226, 307269496307905699, 2019605757530151924, 1196143593917332415]).into(),
		],
	]
}

pub fn generate_c11() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([17054418173490849888, 11471621437112287983, 2736637320199971288, 1819134904140512630]).into(),
			BigInteger256([17466733393954671453, 15116232513785238565, 15003334136884310855, 1735727526517594389]).into(),
			BigInteger256([3018231278213947665, 11756906826253427310, 865102719128852662, 2970189933199996587]).into(),
		],
		[
			BigInteger256([53857651063310097, 8083318015622867638, 11670144255177893450, 1181189051546590777]).into(),
			BigInteger256([7264345978047633403, 3427453013614820152, 17687308340198489875, 858883541620126021]).into(),
			BigInteger256([16139757679130157878, 3528952606930721195, 15856398903938866312, 1645649108355563827]).into(),
		],
		[
			BigInteger256([18259613611884802074, 744602176078339578, 4356130164393161908, 750620222363875571]).into(),
			BigInteger256([8117441027290110048, 12767141919626113394, 10277542331312621822, 1902664590289501020]).into(),
			BigInteger256([18142567679047472086, 2784389961213710191, 4140168213814042183, 684823272106514114]).into(),
		],
		[
			BigInteger256([282509298302633771, 14901915657276303392, 13769774206967582656, 1592939612075046988]).into(),
			BigInteger256([15029079146827225611, 5277947701434344677, 10740941382983966314, 781955803547370784]).into(),
			BigInteger256([13046325154127803473, 15271841070263964187, 3603800691510092686, 1905881597770513026]).into(),
		],
		[
			BigInteger256([18147836268617712982, 10413298699095885023, 9327065618741831658, 3206880635179173199]).into(),
			BigInteger256([7961104417159548784, 13344422238921471806, 11924406431390384663, 2052665222524073279]).into(),
			BigInteger256([13005032304728461175, 17582243758993224695, 10248473147828664992, 3231875006450919708]).into(),
		],
	]
}

pub fn generate_c12() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([9604737890175299306, 11952591534011753808, 14943182360968004505, 2593879447300027479]).into(),
			BigInteger256([16136936607574934125, 12635460431001064455, 14910545630443985360, 690275998716546918]).into(),
			BigInteger256([9974859801427953200, 8970509559472668454, 13147802568752216335, 1769242106777687234]).into(),
		],
		[
			BigInteger256([16195182707833107583, 15827858176195376533, 9364816585327216436, 3481532623310383999]).into(),
			BigInteger256([11349797944779537784, 7848337389964465624, 1585489724280364098, 1562486739353219241]).into(),
			BigInteger256([299574738534894284, 15774196221256035113, 11560070881270290821, 2136624426723258025]).into(),
		],
		[
			BigInteger256([16521154246496397771, 5642919338817456453, 17724106494152086094, 2852725321712119593]).into(),
			BigInteger256([8984735811309350240, 2167745649215877194, 226808028189901552, 2318647723425753931]).into(),
			BigInteger256([11717711903977946719, 11734121989528668209, 1543209836968400498, 679312990471436121]).into(),
		],
		[
			BigInteger256([7167914974923007396, 4867725154692709913, 9475724683532666747, 382518031130098914]).into(),
			BigInteger256([7263451747656492529, 15612406511579619656, 15794977949985463993, 1951799731841132862]).into(),
			BigInteger256([14253531380344450780, 17149421595627640462, 18275357549111665566, 2442398084493626838]).into(),
		],
		[
			BigInteger256([8882024121061072648, 14660249638811034002, 2479936304909085374, 2088357835029043913]).into(),
			BigInteger256([3009881635143434496, 3213792448625028097, 13467690131828994998, 1090178415541778203]).into(),
			BigInteger256([13614238871538377504, 14133257625619989830, 12680744397006639806, 1617164053432527250]).into(),
		],
	]
}

pub fn generate_c13() -> Vec<[Scalar; 3]> {
	vec![
		[
			BigInteger256([15283478423327660144, 13704112697969002700, 3365542576422386393, 1127004209850885532]).into(),
			BigInteger256([9649179334161025978, 15235357479981583552, 6326192347223033870, 1818343763663989123]).into(),
			BigInteger256([14849751341126543608, 11488527144984798584, 9120114908867576777, 1164989258755683746]).into(),
		],
		[
			BigInteger256([4658640436750183089, 3560836902621619118, 16331544763316127153, 1144107236774418521]).into(),
			BigInteger256([16764062968747494690, 3289301024319987453, 599939870177378126, 2409257677298851547]).into(),
			BigInteger256([17910303629776146785, 4333503720265116478, 5349829146288687643, 2136215616631132703]).into(),
		],
	]
}


pub fn generate_m() -> [Scalar; 9] {
    [
		BigInteger256([18364386637727142283, 10718140578549479307, 12877775606795118513, 1196690043610129609]).into(),
		BigInteger256([15476133327266186208, 10598338402256349781, 7701464610378726588, 1652049073940316358]).into(),
		BigInteger256([8726449643484246893, 17800103023430280315, 17732896993093103117, 3139215236411295113]).into(),
		BigInteger256([15431936778085062513, 3227108208197516766, 13385661772669246410, 2984182855068918912]).into(),
		BigInteger256([3004517874245172771, 13302916677726082624, 5519286447998647745, 3324810986103434297]).into(),
		BigInteger256([14459594221771332602, 1480925685775052901, 10894586239177917757, 1157550379892963766]).into(),
		BigInteger256([3630540040312041895, 16631083012873467731, 963663003087537756, 1454699978888462131]).into(),
		BigInteger256([12784839371101448465, 15012715472039172022, 9414510034565922201, 1687935244450844709]).into(),
		BigInteger256([8297773286174348768, 11980778987040554871, 1709819669659146559, 1847597393482099700]).into(),

    ]
}

#[cfg(test)]
mod tests {
    use super::*;
    use super::super::scalar::from_str_10;

	#[test]
	pub fn test_generate_c0() {
		let values = generate_c0();
		assert_eq!(values[0][0], from_str_10("6745197990210204598374042828761989596302876299545964402857411729872131034734"));
		assert_eq!(values[0][1], from_str_10("426281677759936592021316809065178817848084678679510574715894138690250139748"));
		assert_eq!(values[0][2], from_str_10("4014188762916583598888942667424965430287497824629657219807941460227372577781"));
		assert_eq!(values[1][0], from_str_10("21328925083209914769191926116470334003273872494252651254811226518870906634704"));
		assert_eq!(values[1][1], from_str_10("19525217621804205041825319248827370085205895195618474548469181956339322154226"));
		assert_eq!(values[1][2], from_str_10("1402547928439424661186498190603111095981986484908825517071607587179649375482"));
		assert_eq!(values[2][0], from_str_10("18320863691943690091503704046057443633081959680694199244583676572077409194605"));
		assert_eq!(values[2][1], from_str_10("17709820605501892134371743295301255810542620360751268064484461849423726103416"));
		assert_eq!(values[2][2], from_str_10("15970119011175710804034336110979394557344217932580634635707518729185096681010"));
	}

	#[test]
	pub fn test_generate_c1() {
		let values = generate_c1();
		assert_eq!(values[0][0], from_str_10("9818625905832534778628436765635714771300533913823445439412501514317783880744"));
		assert_eq!(values[0][1], from_str_10("6235167673500273618358172865171408902079591030551453531218774338170981503478"));
		assert_eq!(values[0][2], from_str_10("12575685815457815780909564540589853169226710664203625668068862277336357031324"));
		assert_eq!(values[1][0], from_str_10("7381963244739421891665696965695211188125933529845348367882277882370864309593"));
		assert_eq!(values[1][1], from_str_10("14214782117460029685087903971105962785460806586237411939435376993762368956406"));
		assert_eq!(values[1][2], from_str_10("13382692957873425730537487257409819532582973556007555550953772737680185788165"));
		assert_eq!(values[2][0], from_str_10("2203881792421502412097043743980777162333765109810562102330023625047867378813"));
		assert_eq!(values[2][1], from_str_10("2916799379096386059941979057020673941967403377243798575982519638429287573544"));
		assert_eq!(values[2][2], from_str_10("4341714036313630002881786446132415875360643644216758539961571543427269293497"));
		assert_eq!(values[3][0], from_str_10("2340590164268886572738332390117165591168622939528604352383836760095320678310"));
		assert_eq!(values[3][1], from_str_10("5222233506067684445011741833180208249846813936652202885155168684515636170204"));
		assert_eq!(values[3][2], from_str_10("7963328565263035669460582454204125526132426321764384712313576357234706922961"));
		assert_eq!(values[4][0], from_str_10("1394121618978136816716817287892553782094854454366447781505650417569234586889"));
		assert_eq!(values[4][1], from_str_10("20251767894547536128245030306810919879363877532719496013176573522769484883301"));
		assert_eq!(values[4][2], from_str_10("141695147295366035069589946372747683366709960920818122842195372849143476473"));
	}

	#[test]
	pub fn test_generate_c2() {
		let values = generate_c2();
		assert_eq!(values[0][0], from_str_10("15919677773886738212551540894030218900525794162097204800782557234189587084981"));
		assert_eq!(values[0][1], from_str_10("2616624285043480955310772600732442182691089413248613225596630696960447611520"));
		assert_eq!(values[0][2], from_str_10("4740655602437503003625476760295930165628853341577914460831224100471301981787"));
		assert_eq!(values[1][0], from_str_10("19201590924623513311141753466125212569043677014481753075022686585593991810752"));
		assert_eq!(values[1][1], from_str_10("12116486795864712158501385780203500958268173542001460756053597574143933465696"));
		assert_eq!(values[1][2], from_str_10("8481222075475748672358154589993007112877289817336436741649507712124418867136"));
		assert_eq!(values[2][0], from_str_10("5181207870440376967537721398591028675236553829547043817076573656878024336014"));
		assert_eq!(values[2][1], from_str_10("1576305643467537308202593927724028147293702201461402534316403041563704263752"));
		assert_eq!(values[2][2], from_str_10("2555752030748925341265856133642532487884589978209403118872788051695546807407"));
		assert_eq!(values[3][0], from_str_10("18840924862590752659304250828416640310422888056457367520753407434927494649454"));
		assert_eq!(values[3][1], from_str_10("14593453114436356872569019099482380600010961031449147888385564231161572479535"));
		assert_eq!(values[3][2], from_str_10("20826991704411880672028799007667199259549645488279985687894219600551387252871"));
		assert_eq!(values[4][0], from_str_10("9159011389589751902277217485643457078922343616356921337993871236707687166408"));
		assert_eq!(values[4][1], from_str_10("5605846325255071220412087261490782205304876403716989785167758520729893194481"));
		assert_eq!(values[4][2], from_str_10("1148784255964739709393622058074925404369763692117037208398835319441214134867"));
	}

	#[test]
	pub fn test_generate_c3() {
		let values = generate_c3();
		assert_eq!(values[0][0], from_str_10("20945896491956417459309978192328611958993484165135279604807006821513499894540"));
		assert_eq!(values[0][1], from_str_10("229312996389666104692157009189660162223783309871515463857687414818018508814"));
		assert_eq!(values[0][2], from_str_10("21184391300727296923488439338697060571987191396173649012875080956309403646776"));
		assert_eq!(values[1][0], from_str_10("21853424399738097885762888601689700621597911601971608617330124755808946442758"));
		assert_eq!(values[1][1], from_str_10("12776298811140222029408960445729157525018582422120161448937390282915768616621"));
		assert_eq!(values[1][2], from_str_10("7556638921712565671493830639474905252516049452878366640087648712509680826732"));
		assert_eq!(values[2][0], from_str_10("19042212131548710076857572964084011858520620377048961573689299061399932349935"));
		assert_eq!(values[2][1], from_str_10("12871359356889933725034558434803294882039795794349132643274844130484166679697"));
		assert_eq!(values[2][2], from_str_10("3313271555224009399457959221795880655466141771467177849716499564904543504032"));
		assert_eq!(values[3][0], from_str_10("15080780006046305940429266707255063673138269243146576829483541808378091931472"));
		assert_eq!(values[3][1], from_str_10("21300668809180077730195066774916591829321297484129506780637389508430384679582"));
		assert_eq!(values[3][2], from_str_10("20480395468049323836126447690964858840772494303543046543729776750771407319822"));
		assert_eq!(values[4][0], from_str_10("10034492246236387932307199011778078115444704411143703430822959320969550003883"));
		assert_eq!(values[4][1], from_str_10("19584962776865783763416938001503258436032522042569001300175637333222729790225"));
		assert_eq!(values[4][2], from_str_10("20155726818439649091211122042505326538030503429443841583127932647435472711802"));
	}

	#[test]
	pub fn test_generate_c4() {
		let values = generate_c4();
		assert_eq!(values[0][0], from_str_10("13313554736139368941495919643765094930693458639277286513236143495391474916777"));
		assert_eq!(values[0][1], from_str_10("14606609055603079181113315307204024259649959674048912770003912154260692161833"));
		assert_eq!(values[0][2], from_str_10("5563317320536360357019805881367133322562055054443943486481491020841431450882"));
		assert_eq!(values[1][0], from_str_10("10535419877021741166931390532371024954143141727751832596925779759801808223060"));
		assert_eq!(values[1][1], from_str_10("12025323200952647772051708095132262602424463606315130667435888188024371598063"));
		assert_eq!(values[1][2], from_str_10("2906495834492762782415522961458044920178260121151056598901462871824771097354"));
		assert_eq!(values[2][0], from_str_10("19131970618309428864375891649512521128588657129006772405220584460225143887876"));
		assert_eq!(values[2][1], from_str_10("8896386073442729425831367074375892129571226824899294414632856215758860965449"));
		assert_eq!(values[2][2], from_str_10("7748212315898910829925509969895667732958278025359537472413515465768989125274"));
		assert_eq!(values[3][0], from_str_10("422974903473869924285294686399247660575841594104291551918957116218939002865"));
		assert_eq!(values[3][1], from_str_10("6398251826151191010634405259351528880538837895394722626439957170031528482771"));
		assert_eq!(values[3][2], from_str_10("18978082967849498068717608127246258727629855559346799025101476822814831852169"));
		assert_eq!(values[4][0], from_str_10("19150742296744826773994641927898928595714611370355487304294875666791554590142"));
		assert_eq!(values[4][1], from_str_10("12896891575271590393203506752066427004153880610948642373943666975402674068209"));
		assert_eq!(values[4][2], from_str_10("9546270356416926575977159110423162512143435321217584886616658624852959369669"));
	}

	#[test]
	pub fn test_generate_c5() {
		let values = generate_c5();
		assert_eq!(values[0][0], from_str_10("2159256158967802519099187112783460402410585039950369442740637803310736339200"));
		assert_eq!(values[0][1], from_str_10("8911064487437952102278704807713767893452045491852457406400757953039127292263"));
		assert_eq!(values[0][2], from_str_10("745203718271072817124702263707270113474103371777640557877379939715613501668"));
		assert_eq!(values[1][0], from_str_10("19313999467876585876087962875809436559985619524211587308123441305315685710594"));
		assert_eq!(values[1][1], from_str_10("13254105126478921521101199309550428567648131468564858698707378705299481802310"));
		assert_eq!(values[1][2], from_str_10("1842081783060652110083740461228060164332599013503094142244413855982571335453"));
		assert_eq!(values[2][0], from_str_10("9630707582521938235113899367442877106957117302212260601089037887382200262598"));
		assert_eq!(values[2][1], from_str_10("5066637850921463603001689152130702510691309665971848984551789224031532240292"));
		assert_eq!(values[2][2], from_str_10("4222575506342961001052323857466868245596202202118237252286417317084494678062"));
		assert_eq!(values[3][0], from_str_10("2919565560395273474653456663643621058897649501626354982855207508310069954086"));
		assert_eq!(values[3][1], from_str_10("6828792324689892364977311977277548750189770865063718432946006481461319858171"));
		assert_eq!(values[3][2], from_str_10("2245543836264212411244499299744964607957732316191654500700776604707526766099"));
		assert_eq!(values[4][0], from_str_10("19602444885919216544870739287153239096493385668743835386720501338355679311704"));
		assert_eq!(values[4][1], from_str_10("8239538512351936341605373169291864076963368674911219628966947078336484944367"));
		assert_eq!(values[4][2], from_str_10("15053013456316196458870481299866861595818749671771356646798978105863499965417"));
	}

	#[test]
	pub fn test_generate_c6() {
		let values = generate_c6();
		assert_eq!(values[0][0], from_str_10("7173615418515925804810790963571435428017065786053377450925733428353831789901"));
		assert_eq!(values[0][1], from_str_10("8239211677777829016346247446855147819062679124993100113886842075069166957042"));
		assert_eq!(values[0][2], from_str_10("15330855478780269194281285878526984092296288422420009233557393252489043181621"));
		assert_eq!(values[1][0], from_str_10("10014883178425964324400942419088813432808659204697623248101862794157084619079"));
		assert_eq!(values[1][1], from_str_10("14014440630268834826103915635277409547403899966106389064645466381170788813506"));
		assert_eq!(values[1][2], from_str_10("3580284508947993352601712737893796312152276667249521401778537893620670305946"));
		assert_eq!(values[2][0], from_str_10("2559754020964039399020874042785294258009596917335212876725104742182177996988"));
		assert_eq!(values[2][1], from_str_10("14898657953331064524657146359621913343900897440154577299309964768812788279359"));
		assert_eq!(values[2][2], from_str_10("2094037260225570753385567402013028115218264157081728958845544426054943497065"));
		assert_eq!(values[3][0], from_str_10("18051086536715129874440142649831636862614413764019212222493256578581754875930"));
		assert_eq!(values[3][1], from_str_10("21680659279808524976004872421382255670910633119979692059689680820959727969489"));
		assert_eq!(values[3][2], from_str_10("13950668739013333802529221454188102772764935019081479852094403697438884885176"));
		assert_eq!(values[4][0], from_str_10("9703845704528288130475698300068368924202959408694460208903346143576482802458"));
		assert_eq!(values[4][1], from_str_10("12064310080154762977097567536495874701200266107682637369509532768346427148165"));
		assert_eq!(values[4][2], from_str_10("16970760937630487134309762150133050221647250855182482010338640862111040175223"));
	}

	#[test]
	pub fn test_generate_c7() {
		let values = generate_c7();
		assert_eq!(values[0][0], from_str_10("9790997389841527686594908620011261506072956332346095631818178387333642218087"));
		assert_eq!(values[0][1], from_str_10("16314772317774781682315680698375079500119933343877658265473913556101283387175"));
		assert_eq!(values[0][2], from_str_10("82044870826814863425230825851780076663078706675282523830353041968943811739"));
		assert_eq!(values[1][0], from_str_10("21696416499108261787701615667919260888528264686979598953977501999747075085778"));
		assert_eq!(values[1][1], from_str_10("327771579314982889069767086599893095509690747425186236545716715062234528958"));
		assert_eq!(values[1][2], from_str_10("4606746338794869835346679399457321301521448510419912225455957310754258695442"));
		assert_eq!(values[2][0], from_str_10("64499140292086295251085369317820027058256893294990556166497635237544139149"));
		assert_eq!(values[2][1], from_str_10("10455028514626281809317431738697215395754892241565963900707779591201786416553"));
		assert_eq!(values[2][2], from_str_10("10421411526406559029881814534127830959833724368842872558146891658647152404488"));
		assert_eq!(values[3][0], from_str_10("18848084335930758908929996602136129516563864917028006334090900573158639401697"));
		assert_eq!(values[3][1], from_str_10("13844582069112758573505569452838731733665881813247931940917033313637916625267"));
		assert_eq!(values[3][2], from_str_10("13488838454403536473492810836925746129625931018303120152441617863324950564617"));
		assert_eq!(values[4][0], from_str_10("15742141787658576773362201234656079648895020623294182888893044264221895077688"));
		assert_eq!(values[4][1], from_str_10("6756884846734501741323584200608866954194124526254904154220230538416015199997"));
		assert_eq!(values[4][2], from_str_10("7860026400080412708388991924996537435137213401947704476935669541906823414404"));
	}

	#[test]
	pub fn test_generate_c8() {
		let values = generate_c8();
		assert_eq!(values[0][0], from_str_10("7871040688194276447149361970364037034145427598711982334898258974993423182255"));
		assert_eq!(values[0][1], from_str_10("20758972836260983284101736686981180669442461217558708348216227791678564394086"));
		assert_eq!(values[0][2], from_str_10("21723241881201839361054939276225528403036494340235482225557493179929400043949"));
		assert_eq!(values[1][0], from_str_10("19428469330241922173653014973246050805326196062205770999171646238586440011910"));
		assert_eq!(values[1][1], from_str_10("7969200143746252148180468265998213908636952110398450526104077406933642389443"));
		assert_eq!(values[1][2], from_str_10("10950417916542216146808986264475443189195561844878185034086477052349738113024"));
		assert_eq!(values[2][0], from_str_10("18149233917533571579549129116652755182249709970669448788972210488823719849654"));
		assert_eq!(values[2][1], from_str_10("3729796741814967444466779622727009306670204996071028061336690366291718751463"));
		assert_eq!(values[2][2], from_str_10("5172504399789702452458550583224415301790558941194337190035441508103183388987"));
		assert_eq!(values[3][0], from_str_10("6686473297578275808822003704722284278892335730899287687997898239052863590235"));
		assert_eq!(values[3][1], from_str_10("19426913098142877404613120616123695099909113097119499573837343516470853338513"));
		assert_eq!(values[3][2], from_str_10("5120337081764243150760446206763109494847464512045895114970710519826059751800"));
		assert_eq!(values[4][0], from_str_10("5055737465570446530938379301905385631528718027725177854815404507095601126720"));
		assert_eq!(values[4][1], from_str_10("14235578612970484492268974539959119923625505766550088220840324058885914976980"));
		assert_eq!(values[4][2], from_str_10("653592517890187950103239281291172267359747551606210609563961204572842639923"));
	}

	#[test]
	pub fn test_generate_c9() {
		let values = generate_c9();
		assert_eq!(values[0][0], from_str_10("5507360526092411682502736946959369987101940689834541471605074817375175870579"));
		assert_eq!(values[0][1], from_str_10("7864202866011437199771472205361912625244234597659755013419363091895334445453"));
		assert_eq!(values[0][2], from_str_10("21294659996736305811805196472076519801392453844037698272479731199885739891648"));
		assert_eq!(values[1][0], from_str_10("13767183507040326119772335839274719411331242166231012705169069242737428254651"));
		assert_eq!(values[1][1], from_str_10("810181532076738148308457416289197585577119693706380535394811298325092337781"));
		assert_eq!(values[1][2], from_str_10("14232321930654703053193240133923161848171310212544136614525040874814292190478"));
		assert_eq!(values[2][0], from_str_10("16796904728299128263054838299534612533844352058851230375569421467352578781209"));
		assert_eq!(values[2][1], from_str_10("16256310366973209550759123431979563367001604350120872788217761535379268327259"));
		assert_eq!(values[2][2], from_str_10("19791658638819031543640174069980007021961272701723090073894685478509001321817"));
		assert_eq!(values[3][0], from_str_10("7046232469803978873754056165670086532908888046886780200907660308846356865119"));
		assert_eq!(values[3][1], from_str_10("16001732848952745747636754668380555263330934909183814105655567108556497219752"));
		assert_eq!(values[3][2], from_str_10("9737276123084413897604802930591512772593843242069849260396983774140735981896"));
		assert_eq!(values[4][0], from_str_10("11410895086919039954381533622971292904413121053792570364694836768885182251535"));
		assert_eq!(values[4][1], from_str_10("19098362474249267294548762387533474746422711206129028436248281690105483603471"));
		assert_eq!(values[4][2], from_str_10("11013788190750472643548844759298623898218957233582881400726340624764440203586"));
	}

	#[test]
	pub fn test_generate_c10() {
		let values = generate_c10();
		assert_eq!(values[0][0], from_str_10("2206958256327295151076063922661677909471794458896944583339625762978736821035"));
		assert_eq!(values[0][1], from_str_10("7171889270225471948987523104033632910444398328090760036609063776968837717795"));
		assert_eq!(values[0][2], from_str_10("2510237900514902891152324520472140114359583819338640775472608119384714834368"));
		assert_eq!(values[1][0], from_str_10("8825275525296082671615660088137472022727508654813239986303576303490504107418"));
		assert_eq!(values[1][1], from_str_10("1481125575303576470988538039195271612778457110700618040436600537924912146613"));
		assert_eq!(values[1][2], from_str_10("16268684562967416784133317570130804847322980788316762518215429249893668424280"));
		assert_eq!(values[2][0], from_str_10("4681491452239189664806745521067158092729838954919425311759965958272644506354"));
		assert_eq!(values[2][1], from_str_10("3131438137839074317765338377823608627360421824842227925080193892542578675835"));
		assert_eq!(values[2][2], from_str_10("7930402370812046914611776451748034256998580373012248216998696754202474945793"));
		assert_eq!(values[3][0], from_str_10("8973151117361309058790078507956716669068786070949641445408234962176963060145"));
		assert_eq!(values[3][1], from_str_10("10223139291409280771165469989652431067575076252562753663259473331031932716923"));
		assert_eq!(values[3][2], from_str_10("2232089286698717316374057160056566551249777684520809735680538268209217819725"));
		assert_eq!(values[4][0], from_str_10("16930089744400890347392540468934821520000065594669279286854302439710657571308"));
		assert_eq!(values[4][1], from_str_10("21739597952486540111798430281275997558482064077591840966152905690279247146674"));
		assert_eq!(values[4][2], from_str_10("7508315029150148468008716674010060103310093296969466203204862163743615534994"));
	}

	#[test]
	pub fn test_generate_c11() {
		let values = generate_c11();
		assert_eq!(values[0][0], from_str_10("11418894863682894988747041469969889669847284797234703818032750410328384432224"));
		assert_eq!(values[0][1], from_str_10("10895338268862022698088163806301557188640023613155321294365781481663489837917"));
		assert_eq!(values[0][2], from_str_10("18644184384117747990653304688839904082421784959872380449968500304556054962449"));
		assert_eq!(values[1][0], from_str_10("7414443845282852488299349772251184564170443662081877445177167932875038836497"));
		assert_eq!(values[1][1], from_str_10("5391299369598751507276083947272874512197023231529277107201098701900193273851"));
		assert_eq!(values[1][2], from_str_10("10329906873896253554985208009869159014028187242848161393978194008068001342262"));
		assert_eq!(values[2][0], from_str_10("4711719500416619550464783480084256452493890461073147512131129596065578741786"));
		assert_eq!(values[2][1], from_str_10("11943219201565014805519989716407790139241726526989183705078747065985453201504"));
		assert_eq!(values[2][2], from_str_10("4298705349772984837150885571712355513879480272326239023123910904259614053334"));
		assert_eq!(values[3][0], from_str_10("9999044003322463509208400801275356671266978396985433172455084837770460579627"));
		assert_eq!(values[3][1], from_str_10("4908416131442887573991189028182614782884545304889259793974797565686968097291"));
		assert_eq!(values[3][2], from_str_10("11963412684806827200577486696316210731159599844307091475104710684559519773777"));
		assert_eq!(values[4][0], from_str_10("20129916000261129180023520480843084814481184380399868943565043864970719708502"));
		assert_eq!(values[4][1], from_str_10("12884788430473747619080473633364244616344003003135883061507342348586143092592"));
		assert_eq!(values[4][2], from_str_10("20286808211545908191036106582330883564479538831989852602050135926112143921015"));
	}

	#[test]
	pub fn test_generate_c12() {
		let values = generate_c12();
		assert_eq!(values[0][0], from_str_10("16282045180030846845043407450751207026423331632332114205316676731302016331498"));
		assert_eq!(values[0][1], from_str_10("4332932669439410887701725251009073017227450696965904037736403407953448682093"));
		assert_eq!(values[0][2], from_str_10("11105712698773407689561953778861118250080830258196150686012791790342360778288"));
		assert_eq!(values[1][0], from_str_10("21853934471586954540926699232107176721894655187276984175226220218852955976831"));
		assert_eq!(values[1][1], from_str_10("9807888223112768841912392164376763820266226276821186661925633831143729724792"));
		assert_eq!(values[1][2], from_str_10("13411808896854134882869416756427789378942943805153730705795307450368858622668"));
		assert_eq!(values[2][0], from_str_10("17906847067500673080192335286161014930416613104209700445088168479205894040011"));
		assert_eq!(values[2][1], from_str_10("14554387648466176616800733804942239711702169161888492380425023505790070369632"));
		assert_eq!(values[2][2], from_str_10("4264116751358967409634966292436919795665643055548061693088119780787376143967"));
		assert_eq!(values[3][0], from_str_10("2401104597023440271473786738539405349187326308074330930748109868990675625380"));
		assert_eq!(values[3][1], from_str_10("12251645483867233248963286274239998200789646392205783056343767189806123148785"));
		assert_eq!(values[3][2], from_str_10("15331181254680049984374210433775713530849624954688899814297733641575188164316"));
		assert_eq!(values[4][0], from_str_10("13108834590369183125338853868477110922788848506677889928217413952560148766472"));
		assert_eq!(values[4][1], from_str_10("6843160824078397950058285123048455551935389277899379615286104657075620692224"));
		assert_eq!(values[4][2], from_str_10("10151103286206275742153883485231683504642432930275602063393479013696349676320"));
	}

	#[test]
	pub fn test_generate_c13() {
		let values = generate_c13();
		assert_eq!(values[0][0], from_str_10("7074320081443088514060123546121507442501369977071685257650287261047855962224"));
		assert_eq!(values[0][1], from_str_10("11413928794424774638606755585641504971720734248726394295158115188173278890938"));
		assert_eq!(values[0][2], from_str_10("7312756097842145322667451519888915975561412209738441762091369106604423801080"));
		assert_eq!(values[1][0], from_str_10("7181677521425162567568557182629489303281861794357882492140051324529826589361"));
		assert_eq!(values[1][1], from_str_10("15123155547166304758320442783720138372005699143801247333941013553002921430306"));
		assert_eq!(values[1][2], from_str_10("13409242754315411433193860530743374419854094495153957441316635981078068351329"));
	}

	#[test]
	pub fn test_generate_m() {
		let values = generate_m();
		assert_eq!(values[0], from_str_10("7511745149465107256748700652201246547602992235352608707588321460060273774987"));
		assert_eq!(values[1], from_str_10("10370080108974718697676803824769673834027675643658433702224577712625900127200"));
		assert_eq!(values[2], from_str_10("19705173408229649878903981084052839426532978878058043055305024233888854471533"));
		assert_eq!(values[3], from_str_10("18732019378264290557468133440468564866454307626475683536618613112504878618481"));
		assert_eq!(values[4], from_str_10("20870176810702568768751421378473869562658540583882454726129544628203806653987"));
		assert_eq!(values[5], from_str_10("7266061498423634438633389053804536045105766754026813321943009179476902321146"));
		assert_eq!(values[6], from_str_10("9131299761947733513298312097611845208338517739621853568979632113419485819303"));
		assert_eq!(values[7], from_str_10("10595341252162738537912664445405114076324478519622938027420701542910180337937"));
		assert_eq!(values[8], from_str_10("11597556804922396090267472882856054602429588299176362916247939723151043581408"));
	}
}